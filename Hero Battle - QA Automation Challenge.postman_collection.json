{
	"info": {
		"_postman_id": "42b7edf9-c7da-41f1-ab36-a58d4ee19c93",
		"name": "Hero Battle - QA Automation Challenge",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1828324"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Successful Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.environment.set(\"TOKEN_JWT\", responseJson.token)\r",
									"console.log(\"TOKEN_JWT: \" + responseJson.token)\r",
									"\r",
									"pm.test(\"Successful Authentication\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response must be valid\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response has all properties\", () => {\r",
									"    pm.expect(responseJson.auth).to.be.a('boolean');\r",
									"    pm.expect(responseJson.token).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Token must be provided\", () => {\r",
									"    pm.expect(responseJson.auth).to.eql(true);\r",
									"    pm.expect(responseJson.token.length).to.be.greaterThan(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time must not take too long\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{HEROES_CHALLENGE_APP_ID}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "x-app-id",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{HEROES_CHALLENGE_URL}}/{{AUTH_ROUTE}}",
							"host": [
								"{{HEROES_CHALLENGE_URL}}"
							],
							"path": [
								"{{AUTH_ROUTE}}"
							]
						},
						"description": "Validating a successful auth request"
					},
					"response": []
				}
			],
			"description": "Simple authentication tests. Used to collect the token used in most of the other requests."
		},
		{
			"name": "Positive",
			"item": [
				{
					"name": "Get All Heroes",
					"item": [
						{
							"name": "Getting Heroes",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Successful GET Request\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"The response must be valid\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"The response is an array of heroes\", () => {\r",
											"    pm.expect(utils.matchesHeroArraySchema(responseJson)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Response time must not take too long\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{TOKEN_JWT}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}",
									"host": [
										"{{HEROES_CHALLENGE_URL}}"
									],
									"path": [
										"{{HEROES_ROUTE}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create Heroes",
					"item": [
						{
							"name": "Create a random hero",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Creating the request body:\r",
											"let requestBody = utils.getHero();\r",
											"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Successful POST Request\", function () {\r",
											"    // the ideal response should be 201!\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"pm.test(\"The response must be valid\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"The response is a hero\", () => {\r",
											"    pm.expect(utils.matchesHeroSchema(responseJson)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"The Hero was created with an id\", () => {\r",
											"    pm.expect(responseJson.id.length).to.be.greaterThan(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time must not take too long\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{TOKEN_JWT}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}",
									"host": [
										"{{HEROES_CHALLENGE_URL}}"
									],
									"path": [
										"{{HEROES_ROUTE}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Hero -  Max skills values",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const MAXIMUM_SKILL_VALUE = utils.MAXIMUM_SKILL_VALUE();\r",
											"\r",
											"// Getting a hero and changing its skills:\r",
											"let myHero = utils.getHero();\r",
											"myHero.skills.power = MAXIMUM_SKILL_VALUE;\r",
											"myHero.skills.velocity = MAXIMUM_SKILL_VALUE;\r",
											"myHero.skills.combat = MAXIMUM_SKILL_VALUE;\r",
											"\r",
											"// Creating the request body:\r",
											"pm.environment.set(\"requestBody\", JSON.stringify(myHero));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Successful POST Request\", function () {\r",
											"    // the ideal response should be 201!\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"pm.test(\"The response must be valid\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"The response is a hero\", () => {\r",
											"    pm.expect(utils.matchesHeroSchema(responseJson)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"The Hero was created with an id\", () => {\r",
											"    pm.expect(responseJson.id.length).to.be.greaterThan(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time must not take too long\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{TOKEN_JWT}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}",
									"host": [
										"{{HEROES_CHALLENGE_URL}}"
									],
									"path": [
										"{{HEROES_ROUTE}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Hero - Max skills.power",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const MAXIMUM_SKILL_VALUE = utils.MAXIMUM_SKILL_VALUE();\r",
											"\r",
											"// Getting a hero and changing its skills\r",
											"let myHero = utils.getHero();\r",
											"myHero.skills.power = MAXIMUM_SKILL_VALUE;\r",
											"myHero.skills.velocity = 100; // avoiding random generation with maximum value\r",
											"myHero.skills.combat = 100; // avoiding random generation with maximum value\r",
											"\r",
											"// Creating the request body:\r",
											"pm.environment.set(\"requestBody\", JSON.stringify(myHero));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Successful POST Request\", function () {\r",
											"    // the ideal response should be 201!\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"pm.test(\"The response must be valid\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"The response is a hero\", () => {\r",
											"    pm.expect(utils.matchesHeroSchema(responseJson)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"The Hero was created with an id\", () => {\r",
											"    pm.expect(responseJson.id.length).to.be.greaterThan(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time must not take too long\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{TOKEN_JWT}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}",
									"host": [
										"{{HEROES_CHALLENGE_URL}}"
									],
									"path": [
										"{{HEROES_ROUTE}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Hero -  Max skills.velocity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const MAXIMUM_SKILL_VALUE = utils.MAXIMUM_SKILL_VALUE();\r",
											"\r",
											"// Getting a hero and changing its skills\r",
											"let myHero = utils.getHero();\r",
											"myHero.skills.power = 100 ; // avoiding random generation with maximum value\r",
											"myHero.skills.velocity = MAXIMUM_SKILL_VALUE; \r",
											"myHero.skills.combat = 100; // avoiding random generation with maximum value\r",
											"\r",
											"// Creating the request body:\r",
											"pm.environment.set(\"requestBody\", JSON.stringify(myHero));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Successful POST Request\", function () {\r",
											"    // the ideal response should be 201!\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"pm.test(\"The response must be valid\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"The response is a hero\", () => {\r",
											"    pm.expect(utils.matchesHeroSchema(responseJson)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"The Hero was created with an id\", () => {\r",
											"    pm.expect(responseJson.id.length).to.be.greaterThan(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time must not take too long\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{TOKEN_JWT}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}",
									"host": [
										"{{HEROES_CHALLENGE_URL}}"
									],
									"path": [
										"{{HEROES_ROUTE}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Hero - Max skills.combat",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const MAXIMUM_SKILL_VALUE = utils.MAXIMUM_SKILL_VALUE();\r",
											"\r",
											"// Getting a hero and changing its skills\r",
											"let myHero = utils.getHero();\r",
											"myHero.skills.power = 100 ; // avoiding random generation with maximum value\r",
											"myHero.skills.velocity = 100; // avoiding random generation with maximum value\r",
											"myHero.skills.combat = MAXIMUM_SKILL_VALUE; \r",
											"\r",
											"// Creating the request body:\r",
											"pm.environment.set(\"requestBody\", JSON.stringify(myHero));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Successful POST Request\", function () {\r",
											"    // the ideal response should be 201!\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"pm.test(\"The response must be valid\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"The response is a hero\", () => {\r",
											"    pm.expect(utils.matchesHeroSchema(responseJson)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"The Hero was created with an id\", () => {\r",
											"    pm.expect(responseJson.id.length).to.be.greaterThan(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time must not take too long\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{TOKEN_JWT}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}",
									"host": [
										"{{HEROES_CHALLENGE_URL}}"
									],
									"path": [
										"{{HEROES_ROUTE}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Hero - Skills immediately below max",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const MAXIMUM_SKILL_VALUE = utils.MAXIMUM_SKILL_VALUE();\r",
											"\r",
											"// Getting a hero and changing its skills\r",
											"let myHero = utils.getHero();\r",
											"myHero.skills.power = MAXIMUM_SKILL_VALUE - 1;\r",
											"myHero.skills.velocity = MAXIMUM_SKILL_VALUE - 1;\r",
											"myHero.skills.combat = MAXIMUM_SKILL_VALUE - 1;\r",
											"\r",
											"// Creating the request body:\r",
											"pm.environment.set(\"requestBody\", JSON.stringify(myHero));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Successful POST Request\", function () {\r",
											"    // the ideal response should be 201!\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"pm.test(\"The response must be valid\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"The response is a hero\", () => {\r",
											"    pm.expect(utils.matchesHeroSchema(responseJson)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"The Hero was created with an id\", () => {\r",
											"    pm.expect(responseJson.id.length).to.be.greaterThan(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time must not take too long\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{TOKEN_JWT}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}",
									"host": [
										"{{HEROES_CHALLENGE_URL}}"
									],
									"path": [
										"{{HEROES_ROUTE}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Hero - Min skills values",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const MINIMUM_SKILL_VALUE = utils.MINIMUM_SKILL_VALUE();\r",
											"\r",
											"// Getting a hero and changing its skills:\r",
											"let myHero = utils.getHero();\r",
											"myHero.skills.power = MINIMUM_SKILL_VALUE;\r",
											"myHero.skills.velocity = MINIMUM_SKILL_VALUE;\r",
											"myHero.skills.combat = MINIMUM_SKILL_VALUE;\r",
											"\r",
											"// Creating the request body:\r",
											"pm.environment.set(\"requestBody\", JSON.stringify(myHero));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Successful POST Request\", function () {\r",
											"    // the ideal response should be 201!\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"pm.test(\"The response must be valid\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"The response is a hero\", () => {\r",
											"    pm.expect(utils.matchesHeroSchema(responseJson)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"The Hero was created with an id\", () => {\r",
											"    pm.expect(responseJson.id).not.to.be.undefined;\r",
											"    pm.expect(responseJson.id.length).to.be.greaterThan(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time must not take too long\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{TOKEN_JWT}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}",
									"host": [
										"{{HEROES_CHALLENGE_URL}}"
									],
									"path": [
										"{{HEROES_ROUTE}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Hero - Min skills.power",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const MINIMUM_SKILL_VALUE = utils.MINIMUM_SKILL_VALUE();\r",
											"\r",
											"// Getting a hero and changing its skills:\r",
											"let myHero = utils.getHero();\r",
											"myHero.skills.power = MINIMUM_SKILL_VALUE;\r",
											"myHero.skills.velocity = 100;\r",
											"myHero.skills.combat = 100;\r",
											"\r",
											"// Creating the request body:\r",
											"pm.environment.set(\"requestBody\", JSON.stringify(myHero));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Successful POST Request\", function () {\r",
											"    // the ideal response should be 201!\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"pm.test(\"The response must be valid\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"The response is a hero\", () => {\r",
											"    pm.expect(utils.matchesHeroSchema(responseJson)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"The Hero was created with an id\", () => {\r",
											"    pm.expect(responseJson.id).not.to.be.undefined;\r",
											"    pm.expect(responseJson.id.length).to.be.greaterThan(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time must not take too long\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{TOKEN_JWT}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}",
									"host": [
										"{{HEROES_CHALLENGE_URL}}"
									],
									"path": [
										"{{HEROES_ROUTE}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Hero - Min skills.velocity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const MINIMUM_SKILL_VALUE = utils.MINIMUM_SKILL_VALUE();\r",
											"\r",
											"// Getting a hero and changing its skills:\r",
											"let myHero = utils.getHero();\r",
											"myHero.skills.power = 100;\r",
											"myHero.skills.velocity = MINIMUM_SKILL_VALUE;\r",
											"myHero.skills.combat = 100;\r",
											"\r",
											"// Creating the request body:\r",
											"pm.environment.set(\"requestBody\", JSON.stringify(myHero));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Successful POST Request\", function () {\r",
											"    // the ideal response should be 201!\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"pm.test(\"The response must be valid\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"The response is a hero\", () => {\r",
											"    pm.expect(utils.matchesHeroSchema(responseJson)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"The Hero was created with an id\", () => {\r",
											"    pm.expect(responseJson.id).not.to.be.undefined;\r",
											"    pm.expect(responseJson.id.length).to.be.greaterThan(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time must not take too long\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{TOKEN_JWT}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}",
									"host": [
										"{{HEROES_CHALLENGE_URL}}"
									],
									"path": [
										"{{HEROES_ROUTE}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Hero - Min skills.combat",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const MINIMUM_SKILL_VALUE = utils.MINIMUM_SKILL_VALUE();\r",
											"\r",
											"// Getting a hero and changing its skills:\r",
											"let myHero = utils.getHero();\r",
											"myHero.skills.power = 100;\r",
											"myHero.skills.velocity = 100;\r",
											"myHero.skills.combat = MINIMUM_SKILL_VALUE;\r",
											"\r",
											"// Creating the request body:\r",
											"pm.environment.set(\"requestBody\", JSON.stringify(myHero));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Successful POST Request\", function () {\r",
											"    // the ideal response should be 201!\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"pm.test(\"The response must be valid\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"The response is a hero\", () => {\r",
											"    pm.expect(utils.matchesHeroSchema(responseJson)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"The Hero was created with an id\", () => {\r",
											"    pm.expect(responseJson.id).not.to.be.undefined;\r",
											"    pm.expect(responseJson.id.length).to.be.greaterThan(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time must not take too long\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{TOKEN_JWT}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}",
									"host": [
										"{{HEROES_CHALLENGE_URL}}"
									],
									"path": [
										"{{HEROES_ROUTE}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Hero - Skills immediately above min",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const MINIMUM_SKILL_VALUE = utils.MINIMUM_SKILL_VALUE();\r",
											"\r",
											"// Getting a hero and changing its skills:\r",
											"let myHero = utils.getHero();\r",
											"myHero.skills.power = MINIMUM_SKILL_VALUE + 1;\r",
											"myHero.skills.velocity = MINIMUM_SKILL_VALUE + 1;\r",
											"myHero.skills.combat = MINIMUM_SKILL_VALUE + 1;\r",
											"\r",
											"// Creating the request body:\r",
											"pm.environment.set(\"requestBody\", JSON.stringify(myHero));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Successful POST Request\", function () {\r",
											"    // the ideal response should be 201!\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"pm.test(\"The response must be valid\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"The response is a hero\", () => {\r",
											"    pm.expect(utils.matchesHeroSchema(responseJson)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"The Hero was created with an id\", () => {\r",
											"    pm.expect(responseJson.id).not.to.be.undefined;\r",
											"    pm.expect(responseJson.id.length).to.be.greaterThan(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time must not take too long\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{TOKEN_JWT}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}",
									"host": [
										"{{HEROES_CHALLENGE_URL}}"
									],
									"path": [
										"{{HEROES_ROUTE}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Battle",
					"item": [
						{
							"name": "Creating a hero and finding another to beat",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const HEROES_URL = `${pm.environment.get(\"HEROES_CHALLENGE_URL\")}/${pm.collectionVariables.get(\"HEROES_ROUTE\")}`;\r",
											"const TOKEN_JWT = pm.environment.get(\"TOKEN_JWT\");\r",
											"let strongHero, weakHero;\r",
											"\r",
											"/**\r",
											" * Check if a hero is weaker than the created one by checking \r",
											" * if most of his attributes are lower than the other ones\r",
											" */\r",
											"let isWeaker = (hero) => {\r",
											"    let weakerAttributes = 0;\r",
											"    let probablyWeaker = false;\r",
											"\r",
											"    if (hero.skills.power < strongHero.skills.power) weakerAttributes++;\r",
											"    if (hero.skills.velocity < strongHero.skills.velocity) weakerAttributes++;\r",
											"    if (hero.skills.combat < strongHero.skills.combat) weakerAttributes++;\r",
											"\r",
											"    if (weakerAttributes >= 2) {\r",
											"        console.log(`This is probably a weaker Hero! ${JSON.stringify(hero)}`);\r",
											"        probablyWeaker = true;\r",
											"    }\r",
											"\r",
											"    return probablyWeaker;\r",
											"}\r",
											"\r",
											"/**\r",
											" * Generates a random really strong hero\r",
											" */\r",
											"let randomStrongHero = () => {\r",
											"    return {\r",
											"        \"name\": pm.variables.replaceIn(\"Strong {{$randomFullName}}\"),\r",
											"        \"skills\": {\r",
											"            \"power\": 200,\r",
											"            \"velocity\": 200,\r",
											"            \"combat\": 200,\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"const createHeroRequest = utils.createHeroRequest(HEROES_URL, TOKEN_JWT, randomStrongHero());\r",
											"\r",
											"// Creating a hero\r",
											"pm.sendRequest(createHeroRequest, (error, response) => {\r",
											"    if (error) {\r",
											"        console.log(\"Error while creating a hero!\");\r",
											"        console.log(error);\r",
											"    } else {\r",
											"        strongHero = response.json();\r",
											"        console.log(`Created Hero: ${JSON.stringify(strongHero)}`);\r",
											"\r",
											"        const getHeroesRequest = utils.getHeroesRequest(HEROES_URL, TOKEN_JWT);\r",
											"\r",
											"        // Getting Available Heroes\r",
											"        pm.sendRequest(getHeroesRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.log(\"Error while getting existing heroes!\");\r",
											"                console.log(error);\r",
											"            } else {\r",
											"                const heroes = response.json();\r",
											"\r",
											"                // Finding the first weaker hero:\r",
											"                weakHero = heroes.find(isWeaker);\r",
											"\r",
											"                let requestBody = utils.createBattleRequestBody(strongHero.id, weakHero.id);\r",
											"                pm.environment.set(\"requestBody\", requestBody);\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Successful POST Request\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"The response must be valid\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"The response indicates a winner and a loser\", () => {\r",
											"    pm.expect(utils.matchesBattleResponseSchema(responseJson)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Response time must not take too long\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{TOKEN_JWT}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HEROES_CHALLENGE_URL}}/{{BATTLE_ROUTE}}",
									"host": [
										"{{HEROES_CHALLENGE_URL}}"
									],
									"path": [
										"{{BATTLE_ROUTE}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Creating a hero and finding another to lose",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const HEROES_URL = `${pm.environment.get(\"HEROES_CHALLENGE_URL\")}/${pm.collectionVariables.get(\"HEROES_ROUTE\")}`;\r",
											"const TOKEN_JWT = pm.environment.get(\"TOKEN_JWT\");\r",
											"let strongHero, weakHero;\r",
											"\r",
											"/**\r",
											" * Check if a hero is stronger than the created one by checking \r",
											" * if most of his attributes are higher than the other ones\r",
											" */\r",
											"let isStronger = (hero) => {\r",
											"    let higherAttributes = 0;\r",
											"    let isStronger = false;\r",
											"\r",
											"    if (hero.skills.power > weakHero.skills.power) higherAttributes++;\r",
											"    if (hero.skills.velocity > weakHero.skills.velocity) higherAttributes++;\r",
											"    if (hero.skills.combat > weakHero.skills.combat) higherAttributes++;\r",
											"\r",
											"    if (higherAttributes >= 2) {\r",
											"        console.log(`This is probably a stronger Hero! ${JSON.stringify(hero)}`);\r",
											"        isStronger = true;\r",
											"    }\r",
											"\r",
											"    return isStronger;\r",
											"}\r",
											"\r",
											"/**\r",
											" * Generates a random really weak hero\r",
											" */\r",
											"let randomWeakHero = () => {\r",
											"    return {\r",
											"        \"name\": pm.variables.replaceIn(\"Weak {{$randomFullName}}\"),\r",
											"        \"skills\": {\r",
											"            \"power\": 1,\r",
											"            \"velocity\": 1,\r",
											"            \"combat\": 1,\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"// Creating a hero:\r",
											"const createHeroRequest = utils.createHeroRequest(HEROES_URL, TOKEN_JWT, randomWeakHero());\r",
											"pm.sendRequest(createHeroRequest, (error, response) => {\r",
											"    if (error) {\r",
											"        console.log(\"Error While creating a hero!\");\r",
											"        console.log(error);\r",
											"    } else {\r",
											"        weakHero = response.json();\r",
											"        console.log(`Created Hero: ${JSON.stringify(weakHero)}`);\r",
											"\r",
											"        // Getting Available Heroes\r",
											"        const getHeroesRequest = utils.getHeroesRequest(HEROES_URL, TOKEN_JWT);\r",
											"        pm.sendRequest(getHeroesRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.log(\"Error While getting existing heroes!\");\r",
											"                console.log(error);\r",
											"            } else {\r",
											"                const heroes = response.json();\r",
											"\r",
											"                // Finding the first stronger hero:\r",
											"                strongHero = heroes.find(isStronger);\r",
											"\r",
											"                // Defining rhe request body:\r",
											"                let requestBody = utils.createBattleRequestBody(weakHero.id, strongHero.id);\r",
											"                pm.environment.set(\"requestBody\", requestBody);\r",
											"            }\r",
											"\r",
											"        });\r",
											"    }\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Successful POST Request\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"The response must be valid\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"The response indicates a winner and a loser\", () => {\r",
											"    pm.expect(utils.matchesBattleResponseSchema(responseJson)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Response time must not take too long\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{TOKEN_JWT}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HEROES_CHALLENGE_URL}}/{{BATTLE_ROUTE}}",
									"host": [
										"{{HEROES_CHALLENGE_URL}}"
									],
									"path": [
										"{{BATTLE_ROUTE}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Creating a hero and finding another to tie",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const HEROES_URL = `${pm.environment.get(\"HEROES_CHALLENGE_URL\")}/${pm.collectionVariables.get(\"HEROES_ROUTE\")}`;\r",
											"const TOKEN_JWT = pm.environment.get(\"TOKEN_JWT\");\r",
											"let anotherHero, ordinaryHero;\r",
											"\r",
											"/**\r",
											" * Check if a hero has the same attributes as other\r",
											" */\r",
											"let hasSameStrength = (anotherHero) => {\r",
											"    let sameAttributes = 0;\r",
											"    let hasSameStrength = false;\r",
											"\r",
											"    if (anotherHero.name !== ordinaryHero.name) {\r",
											"        if (anotherHero.skills.power == ordinaryHero.skills.power) sameAttributes++;\r",
											"        if (anotherHero.skills.velocity == ordinaryHero.skills.velocity) sameAttributes++;\r",
											"        if (anotherHero.skills.combat == ordinaryHero.skills.combat) sameAttributes++;\r",
											"\r",
											"        if (sameAttributes == 3) {\r",
											"            console.log(`This hero possesses the same strength! ${JSON.stringify(anotherHero)}`);\r",
											"            hasSameStrength = true;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    return hasSameStrength;\r",
											"}\r",
											"\r",
											"/**\r",
											" * Generates a random ordinary hero\r",
											" */\r",
											"let randomHero = () => {\r",
											"    return {\r",
											"        \"name\": pm.variables.replaceIn(\"Ordinary {{$randomFullName}}\"),\r",
											"        \"skills\": {\r",
											"            \"power\": 100,\r",
											"            \"velocity\": 100,\r",
											"            \"combat\": 100,\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"// Creating a hero\r",
											"const createHeroRequest = utils.createHeroRequest(HEROES_URL, TOKEN_JWT, randomHero());\r",
											"pm.sendRequest(createHeroRequest, (error, response) => {\r",
											"    if (error) {\r",
											"        console.log(\"Error While creating a hero!\");\r",
											"        console.log(error);\r",
											"    } else {\r",
											"        ordinaryHero = response.json();\r",
											"        console.log(`Created Hero: ${JSON.stringify(ordinaryHero)}`);\r",
											"\r",
											"        // Getting Available Heroes\r",
											"        const getHeroesRequest = utils.getHeroesRequest(HEROES_URL, TOKEN_JWT);\r",
											"        pm.sendRequest(getHeroesRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.log(\"Error While getting existing heroes!\");\r",
											"                console.log(error);\r",
											"            } else {\r",
											"                const heroes = response.json();\r",
											"\r",
											"                // Finding the first stronger hero:\r",
											"                anotherHero = heroes.find(hasSameStrength);\r",
											"\r",
											"                // Defining rhe request body:\r",
											"                let requestBody = utils.createBattleRequestBody(ordinaryHero.id, anotherHero.id);\r",
											"                pm.environment.set(\"requestBody\", requestBody);\r",
											"            }\r",
											"\r",
											"        });\r",
											"    }\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Successful POST Request\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"The response must be valid\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"The response indicates a tie\", () => {\r",
											"    pm.expect(utils.matchesTieSchema(responseJson)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Response time must not take too long\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{TOKEN_JWT}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HEROES_CHALLENGE_URL}}/{{BATTLE_ROUTE}}",
									"host": [
										"{{HEROES_CHALLENGE_URL}}"
									],
									"path": [
										"{{BATTLE_ROUTE}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Random Battle",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const HEROES_URL = `${pm.environment.get(\"HEROES_CHALLENGE_URL\")}/${pm.collectionVariables.get(\"HEROES_ROUTE\")}`;\r",
											"const TOKEN_JWT = pm.environment.get(\"TOKEN_JWT\");\r",
											"let heroOne, heroTwo;\r",
											"\r",
											"// Getting Heroes:\r",
											"const getRequest = utils.getHeroesRequest(HEROES_URL, TOKEN_JWT);\r",
											"pm.sendRequest(getRequest, (error, response) => {\r",
											"    if (error) {\r",
											"        console.log(error);\r",
											"    } else {\r",
											"        const responseJson = response.json();\r",
											"        console.log(responseJson);\r",
											"\r",
											"        heroOne = responseJson[Math.floor(Math.random() * responseJson.length)];\r",
											"        heroTwo = responseJson[Math.floor(Math.random() * responseJson.length)];\r",
											"    }\r",
											"\r",
											"    // Defining the request body:\r",
											"    let requestBody = utils.createBattleRequestBody(heroOne.id, heroTwo.id);\r",
											"    pm.environment.set(\"requestBody\", requestBody);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Successful POST Request\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"The response must be valid\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response time must not take too long\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{TOKEN_JWT}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HEROES_CHALLENGE_URL}}/{{BATTLE_ROUTE}}",
									"host": [
										"{{HEROES_CHALLENGE_URL}}"
									],
									"path": [
										"{{BATTLE_ROUTE}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "Grouped test cases for valid inputs.\n\nBasically, the \"happy paths\" are validated here in order to guarantee that the API is doing what it was designed for."
		},
		{
			"name": "Negative",
			"item": [
				{
					"name": "Missing Request Parameters",
					"item": [
						{
							"name": "Authentication",
							"item": [
								{
									"name": "Auth without  app-id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Failed Auth Request\", function () {\r",
													"    // Ideal response should be Bad Request\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400, 500]);\r",
													"});\r",
													"\r",
													"pm.test(\"The response defined by the header must be a json\", () => {\r",
													"    // Content-Type header is application/json with charset UTF-8\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be valid\", function () {\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response has all properties\", () => {\r",
													"    pm.expect(responseJson.message).to.equal(\"Unauthorized\");\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"Token must not be provided\", () => {\r",
													"    pm.expect(responseJson.auth).to.be.undefined;\r",
													"    pm.expect(responseJson.token).to.be.undefined;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "",
													"type": "string"
												},
												{
													"key": "key",
													"value": "x-app-id",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{AUTH_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{AUTH_ROUTE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Auth with empty app-id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Failed Auth Request\", function () {\r",
													"    // Ideal response should be Bad Request\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400, 500]);\r",
													"});\r",
													"\r",
													"pm.test(\"The response defined by the header must be a json\", () => {\r",
													"    // Content-Type header is application/json with charset UTF-8\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be valid\", function () {\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response has all properties\", () => {\r",
													"    pm.expect(responseJson.message).to.equal(\"Unauthorized\");\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"Token must not be provided\", () => {\r",
													"    pm.expect(responseJson.auth).to.be.undefined;\r",
													"    pm.expect(responseJson.token).to.be.undefined;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "",
													"type": "string"
												},
												{
													"key": "key",
													"value": "x-app-id",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{AUTH_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{AUTH_ROUTE}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Miscellaneous Token Values",
					"item": [
						{
							"name": "Authentication",
							"item": [
								{
									"name": "Auth with invalid app-id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Failed Auth Request\", function () {\r",
													"    // Ideal response should be Bad Request\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400, 500]);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be valid\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response is a message saying 'unauthorized'\", () => {\r",
													"    const schema = {\r",
													"        \"type\": \"object\",\r",
													"        \"properties\": {\r",
													"            \"message\": { \"type\": \"string\" },\r",
													"        },\r",
													"        \"required\": [\"message\"]\r",
													"    }\r",
													"\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"    pm.expect(responseJson.message).to.equal('Unauthorized');\r",
													"});\r",
													"\r",
													"pm.test(\"Token must not be provided\", () => {\r",
													"    pm.expect(responseJson.auth).to.be.undefined;\r",
													"    pm.expect(responseJson.token).to.be.undefined;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{$randomUUID}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "x-app-id",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{AUTH_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{AUTH_ROUTE}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get All Heroes",
							"item": [
								{
									"name": "Get Heroes without token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Unauthorized GET Request\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be valid\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.unauthorized;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response is a message saying 'unauthorized'\", () => {\r",
													"    pm.expect(utils.matchesErrorResponseSchema(responseJson)).to.be.true;\r",
													"    pm.expect(responseJson.message).to.equal('Unauthorized');\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{HEROES_ROUTE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Heroes with invalid token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Unauthorized GET Request\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be valid\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.unauthorized;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response is a message saying 'unauthorized'\", () => {\r",
													"    pm.expect(utils.matchesErrorResponseSchema(responseJson)).to.be.true;\r",
													"    pm.expect(responseJson.message).to.equal('Unauthorized');\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-access-token",
												"value": "{{INVALID_TOKEN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{HEROES_ROUTE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Heroes with expired token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Unauthorized GET Request\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be valid\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.unauthorized;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response is a message saying 'unauthorized'\", () => {\r",
													"    pm.expect(utils.matchesErrorResponseSchema(responseJson)).to.be.true;\r",
													"    pm.expect(responseJson.message).to.equal('Unauthorized');\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-access-token",
												"value": "{{EXPIRED_TOKEN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{HEROES_ROUTE}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create Heroes",
							"item": [
								{
									"name": "Create a hero without token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Creating the request body:\r",
													"let requestBody = utils.getHero();\r",
													"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Unauthorized POST Request\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be valid\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.unauthorized;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response is a message saying 'unauthorized'\", () => {\r",
													"    pm.expect(utils.matchesErrorResponseSchema(responseJson)).to.be.true;\r",
													"    pm.expect(responseJson.message).to.equal('Unauthorized');\r",
													"});\r",
													"\r",
													"pm.test(\"The Hero must not be created\", () => {\r",
													"    pm.expect(responseJson.id).to.be.undefined;\r",
													"    pm.expect(responseJson.name).to.be.undefined;\r",
													"    pm.expect(responseJson.skills).to.be.undefined;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{HEROES_ROUTE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a hero with invalid token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Creating the request body:\r",
													"let requestBody = utils.getHero();\r",
													"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Unauthorized POST Request\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be valid\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.unauthorized;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response is a message saying 'unauthorized'\", () => {\r",
													"    pm.expect(utils.matchesErrorResponseSchema(responseJson)).to.be.true;\r",
													"    pm.expect(responseJson.message).to.equal('Unauthorized');\r",
													"});\r",
													"\r",
													"pm.test(\"The Hero must not be created\", () => {\r",
													"    pm.expect(responseJson.id).to.be.undefined;\r",
													"    pm.expect(responseJson.name).to.be.undefined;\r",
													"    pm.expect(responseJson.skills).to.be.undefined;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-access-token",
												"value": "{{INVALID_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{HEROES_ROUTE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a hero with expired token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Creating the request body:\r",
													"let requestBody = utils.getHero();\r",
													"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Unauthorized POST Request\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be valid\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.unauthorized;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response is a message saying 'unauthorized'\", () => {\r",
													"    pm.expect(utils.matchesErrorResponseSchema(responseJson)).to.be.true;\r",
													"    pm.expect(responseJson.message).to.equal('Unauthorized');\r",
													"});\r",
													"\r",
													"pm.test(\"The Hero must not be created\", () => {\r",
													"    pm.expect(responseJson.id).to.be.undefined;\r",
													"    pm.expect(responseJson.name).to.be.undefined;\r",
													"    pm.expect(responseJson.skills).to.be.undefined;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-access-token",
												"value": "{{EXPIRED_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{HEROES_ROUTE}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Battle",
							"item": [
								{
									"name": "Random Battle without token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Providing a randomId for the negative test if no heroes were found:\r",
													"const randomId = \"93f96fb2-dcca-4b47-bcdf-9bf5058898d6\";\r",
													"\r",
													"let requestBody = {\r",
													"    \"hero_id\": randomId,\r",
													"    \"machine_hero_id\": randomId\r",
													"};\r",
													"\r",
													"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Unauthorized POST Request\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be valid\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.unauthorized;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response is a message saying 'unauthorized'\", () => {\r",
													"    pm.expect(utils.matchesErrorResponseSchema(responseJson)).to.be.true;\r",
													"    pm.expect(responseJson.message).to.equal('Unauthorized');\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{BATTLE_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{BATTLE_ROUTE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Random Battle with invalid token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Providing a randomId for the negative test if no heroes were found:\r",
													"const randomId = \"93f96fb2-dcca-4b47-bcdf-9bf5058898d6\";\r",
													"\r",
													"let requestBody = {\r",
													"    \"hero_id\": randomId,\r",
													"    \"machine_hero_id\": randomId\r",
													"};\r",
													"\r",
													"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Unauthorized POST Request\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be valid\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.unauthorized;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response is a message saying 'unauthorized'\", () => {\r",
													"    pm.expect(utils.matchesErrorResponseSchema(responseJson)).to.be.true;\r",
													"    pm.expect(responseJson.message).to.equal('Unauthorized');\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-access-token",
												"value": "{{INVALID_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{BATTLE_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{BATTLE_ROUTE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Random Battle with expired token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Providing a randomId for the negative test if no heroes were found:\r",
													"const randomId = \"93f96fb2-dcca-4b47-bcdf-9bf5058898d6\";\r",
													"\r",
													"let requestBody = {\r",
													"    \"hero_id\": randomId,\r",
													"    \"machine_hero_id\": randomId\r",
													"};\r",
													"\r",
													"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Unauthorized POST Request\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be valid\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.unauthorized;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response is a message saying 'unauthorized'\", () => {\r",
													"    pm.expect(utils.matchesErrorResponseSchema(responseJson)).to.be.true;\r",
													"    pm.expect(responseJson.message).to.equal('Unauthorized');\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-access-token",
												"value": "{{EXPIRED_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{BATTLE_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{BATTLE_ROUTE}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Missing Body Fields",
					"item": [
						{
							"name": "Create Heroes",
							"item": [
								{
									"name": "Empty Request Body",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Failed POST Request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400, 500]);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be valid\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response is not a hero\", () => {\r",
													"    pm.expect(utils.matchesHeroSchema(responseJson)).to.be.false;\r",
													"});\r",
													"\r",
													"// Answer could be more specific:\r",
													"pm.test(\"The response is a message saying 'Name is empty'\", () => {\r",
													"    pm.expect(utils.matchesErrorResponseSchema(responseJson)).to.be.true;\r",
													"    pm.expect(responseJson.message).to.equal('Name is empty');\r",
													"});\r",
													"\r",
													"pm.test(\"The Hero must not be created\", () => {\r",
													"    pm.expect(responseJson.id).to.be.undefined;\r",
													"    pm.expect(responseJson.name).to.be.undefined;\r",
													"    pm.expect(responseJson.skills).to.be.undefined;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-access-token",
												"value": "{{TOKEN_JWT}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{HEROES_ROUTE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Hero without name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let myHero = utils.getHero();\r",
													"\r",
													"// Removing name property:\r",
													"delete myHero.name;\r",
													"\r",
													"// Defining the request body:\r",
													"pm.environment.set(\"requestBody\", JSON.stringify(myHero));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Failed POST Request\", function () {\r",
													"     pm.expect(pm.response.code).to.be.oneOf([400, 500]);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be valid\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response is not a hero\", () => {\r",
													"    pm.expect(utils.matchesHeroSchema(responseJson)).to.be.false;\r",
													"});\r",
													"\r",
													"pm.test(\"The response is a message saying 'Name is empty'\", () => {\r",
													"    pm.expect(utils.matchesErrorResponseSchema(responseJson)).to.be.true;\r",
													"    pm.expect(responseJson.message).to.equal('Name is empty');\r",
													"});\r",
													"\r",
													"pm.test(\"The Hero must not be created\", () => {\r",
													"    pm.expect(responseJson.id).to.be.undefined;\r",
													"    pm.expect(responseJson.name).to.be.undefined;\r",
													"    pm.expect(responseJson.skills).to.be.undefined;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-access-token",
												"value": "{{TOKEN_JWT}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{HEROES_ROUTE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Hero without all skills",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let myHero = utils.getHero();\r",
													"\r",
													"// Removing skills property:\r",
													"delete myHero.skills;\r",
													"\r",
													"// Defining the request body:\r",
													"pm.environment.set(\"requestBody\", JSON.stringify(myHero));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Failed POST Request\", function () {\r",
													"     pm.expect(pm.response.code).to.be.oneOf([400, 500]);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be valid\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"The response is not a hero\", () => {\r",
													"    pm.expect(utils.matchesHeroSchema(responseJson)).to.be.false;\r",
													"});\r",
													"\r",
													"pm.test(\"The response is a message saying 'Skills is empty'\", () => {\r",
													"    pm.expect(utils.matchesErrorResponseSchema(responseJson)).to.be.true;\r",
													"    pm.expect(responseJson.message).to.equal('Skills is empty');\r",
													"});\r",
													"\r",
													"pm.test(\"The Hero must not be created\", () => {\r",
													"    pm.expect(responseJson.id).to.be.undefined;\r",
													"    pm.expect(responseJson.name).to.be.undefined;\r",
													"    pm.expect(responseJson.skills).to.be.undefined;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-access-token",
												"value": "{{TOKEN_JWT}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{HEROES_ROUTE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Hero with empty skills",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let myHero = utils.getHero();\r",
													"\r",
													"// Redefining skills property:\r",
													"delete myHero.skills;\r",
													"myHero.skills = {};\r",
													"\r",
													"// Defining the request body:\r",
													"pm.environment.set(\"requestBody\", JSON.stringify(myHero));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Failed POST Request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400, 500]);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be valid\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response is not a hero\", () => {\r",
													"    pm.expect(utils.matchesHeroSchema(responseJson)).to.be.false;\r",
													"});\r",
													"\r",
													"pm.test(\"The response is a message saying 'Skills -> Power is empty'\", () => {\r",
													"    pm.expect(utils.matchesErrorResponseSchema(responseJson)).to.be.true;\r",
													"    pm.expect(responseJson.message).to.equal('Skills -> Power is empty');\r",
													"});\r",
													"\r",
													"pm.test(\"The Hero must not be created\", () => {\r",
													"    pm.expect(responseJson.id).to.be.undefined;\r",
													"    pm.expect(responseJson.name).to.be.undefined;\r",
													"    pm.expect(responseJson.skills).to.be.undefined;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-access-token",
												"value": "{{TOKEN_JWT}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{HEROES_ROUTE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Hero without skills.power",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let myHero = utils.getHero();\r",
													"\r",
													"// Removing skills.power property:\r",
													"delete myHero.skills.power;\r",
													"\r",
													"// Defining the request body:\r",
													"pm.environment.set(\"requestBody\", JSON.stringify(myHero));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Failed POST Request\", function () {\r",
													"     pm.expect(pm.response.code).to.be.oneOf([400, 500]);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be valid\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response is not a hero\", () => {\r",
													"    pm.expect(utils.matchesHeroSchema(responseJson)).to.be.false;\r",
													"});\r",
													"\r",
													"pm.test(\"The response is a message saying 'Skills -> Power is empty'\", () => {\r",
													"    pm.expect(utils.matchesErrorResponseSchema(responseJson)).to.be.true;\r",
													"    pm.expect(responseJson.message).to.equal('Skills -> Power is empty');\r",
													"});\r",
													"\r",
													"pm.test(\"The Hero must not be created\", () => {\r",
													"    pm.expect(responseJson.id).to.be.undefined;\r",
													"    pm.expect(responseJson.name).to.be.undefined;\r",
													"    pm.expect(responseJson.skills).to.be.undefined;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-access-token",
												"value": "{{TOKEN_JWT}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{HEROES_ROUTE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Hero without skills.velocity",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let myHero = utils.getHero();\r",
													"\r",
													"// Removing skills.velocity property:\r",
													"delete myHero.skills.velocity;\r",
													"\r",
													"// Defining the request body:\r",
													"pm.environment.set(\"requestBody\", JSON.stringify(myHero));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Failed POST Request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400, 500]);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be valid\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response is not a hero\", () => {\r",
													"    pm.expect(utils.matchesHeroSchema(responseJson)).to.be.false;\r",
													"});\r",
													"\r",
													"pm.test(\"The response is a message saying 'Skills -> Velocity is empty'\", () => {\r",
													"    pm.expect(utils.matchesErrorResponseSchema(responseJson)).to.be.true;\r",
													"    pm.expect(responseJson.message).to.equal('Skills -> Velocity is empty');\r",
													"});\r",
													"\r",
													"pm.test(\"The Hero must not be created\", () => {\r",
													"    pm.expect(responseJson.id).to.be.undefined;\r",
													"    pm.expect(responseJson.name).to.be.undefined;\r",
													"    pm.expect(responseJson.skills).to.be.undefined;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-access-token",
												"value": "{{TOKEN_JWT}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{HEROES_ROUTE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Hero without skills.combat",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let myHero = utils.getHero();\r",
													"\r",
													"// Removing skills.combat property:\r",
													"delete myHero.skills.combat;\r",
													"\r",
													"// Defining the request body:\r",
													"pm.environment.set(\"requestBody\", JSON.stringify(myHero));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Failed POST Request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400, 500]);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be valid\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response is not a hero\", () => {\r",
													"    pm.expect(utils.matchesHeroSchema(responseJson)).to.be.false;\r",
													"});\r",
													"\r",
													"pm.test(\"The response is a message saying 'Skills -> Combat is empty'\", () => {\r",
													"    pm.expect(utils.matchesErrorResponseSchema(responseJson)).to.be.true;\r",
													"    pm.expect(responseJson.message).to.equal('Skills -> Combat is empty');\r",
													"});\r",
													"\r",
													"pm.test(\"The Hero must not be created\", () => {\r",
													"    pm.expect(responseJson.id).to.be.undefined;\r",
													"    pm.expect(responseJson.name).to.be.undefined;\r",
													"    pm.expect(responseJson.skills).to.be.undefined;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-access-token",
												"value": "{{TOKEN_JWT}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{HEROES_ROUTE}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Battle",
							"item": [
								{
									"name": "Empty Request Body",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Failed POST Request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400, 500]);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be valid\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response is a message saying 'Change the hero'\", () => {\r",
													"    pm.expect(utils.matchesErrorResponseSchema(responseJson)).to.be.true;\r",
													"    pm.expect(responseJson.message).to.equal('Change the hero');\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-access-token",
												"value": "{{TOKEN_JWT}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{BATTLE_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{BATTLE_ROUTE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Battle without hero_id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Providing a randomId for the negative test:\r",
													"const randomId = \"93f96fb2-dcca-4b47-bcdf-9bf5058898d6\";\r",
													"\r",
													"let requestBody = {\r",
													"    \"machine_hero_id\": randomId\r",
													"};\r",
													"\r",
													"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Failed POST Request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400, 500]);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be valid\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response is a message saying 'Hero is empty'\", () => {\r",
													"    pm.expect(utils.matchesErrorResponseSchema(responseJson)).to.be.true;\r",
													"    pm.expect(responseJson.message).to.equal('Hero is empty');\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-access-token",
												"value": "{{TOKEN_JWT}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{BATTLE_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{BATTLE_ROUTE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Battle without machine_hero_id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Providing a randomId for the negative test:\r",
													"const randomId = \"93f96fb2-dcca-4b47-bcdf-9bf5058898d6\";\r",
													"\r",
													"let requestBody = {\r",
													"    \"hero_id\": randomId,\r",
													"};\r",
													"\r",
													"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Failed POST Request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400, 500]);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be valid\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response is a message saying 'Machine Hero is empty'\", () => {\r",
													"    pm.expect(utils.matchesErrorResponseSchema(responseJson)).to.be.true;\r",
													"    pm.expect(responseJson.message).to.equal('Machine Hero is empty');\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-access-token",
												"value": "{{TOKEN_JWT}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{BATTLE_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{BATTLE_ROUTE}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Boundary Value Analysis/Invalid Partitions",
					"item": [
						{
							"name": "Create Heroes",
							"item": [
								{
									"name": "Create Hero - Blank name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let myHero = utils.getHero();\r",
													"\r",
													"// Redefining name property\r",
													"delete myHero.name;\r",
													"myHero.name = \"\";\r",
													"\r",
													"// Defining the request body:\r",
													"pm.environment.set(\"requestBody\", JSON.stringify(myHero));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Failed POST Request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400, 500]);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be valid\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response is a message saying 'Name is empty'\", () => {\r",
													"    pm.expect(utils.matchesErrorResponseSchema(responseJson)).to.be.true;\r",
													"    pm.expect(responseJson.message).to.equal('Name is empty');\r",
													"});\r",
													"\r",
													"pm.test(\"The Hero must not be created\", () => {\r",
													"    pm.expect(responseJson.id).to.be.undefined;\r",
													"    pm.expect(responseJson.name).to.be.undefined;\r",
													"    pm.expect(responseJson.skills).to.be.undefined;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-access-token",
												"value": "{{TOKEN_JWT}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{HEROES_ROUTE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Hero - Unexpected name type (number)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let myHero = utils.getHero();\r",
													"\r",
													"// Redefining name property\r",
													"delete myHero.name;\r",
													"const unexpectedNameType = utils.getRandomIntValue(0, Number.MAX_VALUE); // number\r",
													"myHero.name = unexpectedNameType;\r",
													"\r",
													"// Defining the request body:\r",
													"pm.environment.set(\"requestBody\", JSON.stringify(myHero));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Failed POST Request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400, 500]);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be valid\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response has an error message\", () => {\r",
													"    pm.expect(utils.matchesErrorResponseSchema(responseJson)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"The Hero must not be created\", () => {\r",
													"    pm.expect(responseJson.id).to.be.undefined;\r",
													"    pm.expect(responseJson.name).to.be.undefined;\r",
													"    pm.expect(responseJson.skills).to.be.undefined;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-access-token",
												"value": "{{TOKEN_JWT}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{HEROES_ROUTE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Hero - Unexpected name type (boolean)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let myHero = utils.getHero();\r",
													"\r",
													"// Redefining name property\r",
													"delete myHero.name;\r",
													"const unexpectedNameType = Math.random() < 0.5; // random boolean\r",
													"myHero.name = unexpectedNameType;\r",
													"\r",
													"// Defining the request body:\r",
													"pm.environment.set(\"requestBody\", JSON.stringify(myHero));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Failed POST Request\", function () {\r",
													"     pm.expect(pm.response.code).to.be.oneOf([400, 500]);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be valid\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response has an error message\", () => {\r",
													"    pm.expect(utils.matchesErrorResponseSchema(responseJson)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"The Hero must not be created\", () => {\r",
													"    pm.expect(responseJson.id).to.be.undefined;\r",
													"    pm.expect(responseJson.name).to.be.undefined;\r",
													"    pm.expect(responseJson.skills).to.be.undefined;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-access-token",
												"value": "{{TOKEN_JWT}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{HEROES_ROUTE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Hero - Unexpected name type (array)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let myHero = utils.getHero();\r",
													"\r",
													"// Redefining name property\r",
													"delete myHero.name;\r",
													"const unexpectedNameType = []\r",
													"myHero.name = unexpectedNameType;\r",
													"\r",
													"// Defining the request body:\r",
													"pm.environment.set(\"requestBody\", JSON.stringify(myHero));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Failed POST Request\", function () {\r",
													"     pm.expect(pm.response.code).to.be.oneOf([400, 500]);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be valid\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response has an error message\", () => {\r",
													"    pm.expect(utils.matchesErrorResponseSchema(responseJson)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"The Hero must not be created\", () => {\r",
													"    pm.expect(responseJson.id).to.be.undefined;\r",
													"    pm.expect(responseJson.name).to.be.undefined;\r",
													"    pm.expect(responseJson.skills).to.be.undefined;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-access-token",
												"value": "{{TOKEN_JWT}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{HEROES_ROUTE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Hero - Unexpected name type (null)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let myHero = utils.getHero();\r",
													"\r",
													"// Redefining name property\r",
													"delete myHero.name;\r",
													"const unexpectedNameType = null;\r",
													"myHero.name = unexpectedNameType;\r",
													"\r",
													"// Defining the request body:\r",
													"pm.environment.set(\"requestBody\", JSON.stringify(myHero));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Failed POST Request\", function () {\r",
													"     pm.expect(pm.response.code).to.be.oneOf([400, 500]);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be valid\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response has an error message\", () => {\r",
													"    pm.expect(utils.matchesErrorResponseSchema(responseJson)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"The Hero must not be created\", () => {\r",
													"    pm.expect(responseJson.id).to.be.undefined;\r",
													"    pm.expect(responseJson.name).to.be.undefined;\r",
													"    pm.expect(responseJson.skills).to.be.undefined;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-access-token",
												"value": "{{TOKEN_JWT}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{HEROES_ROUTE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Hero - Unexpected name type (special chars)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let myHero = utils.getHero();\r",
													"\r",
													"// Redefining name property\r",
													"const unexpectedNameType = \"¡²³¤€¼½¾‘’¥×äåé®þüúíóöö«»¬áßð´¶ø¿çµñ©æ\";\r",
													"myHero.name = myHero.name + unexpectedNameType;\r",
													"\r",
													"// Defining the request body:\r",
													"pm.environment.set(\"requestBody\", JSON.stringify(myHero));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Successful POST Request\", function () {\r",
													"    // the ideal response should be 201!\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be valid\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response is a hero\", () => {\r",
													"    pm.expect(utils.matchesHeroSchema(responseJson)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"The Hero was created with an id\", () => {\r",
													"    pm.expect(responseJson.id.length).to.be.greaterThan(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-access-token",
												"value": "{{TOKEN_JWT}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{HEROES_ROUTE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Hero - Unexpected skills (string)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let myHero = utils.getHero();\r",
													"\r",
													"// Redefining skills property\r",
													"delete myHero.skills;\r",
													"const unexpectedSkillsType = pm.variables.replaceIn(\"{{$randomAbbreviation}}\"); // string\r",
													"myHero.skills = unexpectedSkillsType;\r",
													"\r",
													"// Defining the request body:\r",
													"pm.environment.set(\"requestBody\", JSON.stringify(myHero));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Failed POST Request\", function () {\r",
													"     pm.expect(pm.response.code).to.be.oneOf([400, 500]);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be valid\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response has an error message\", () => {\r",
													"    pm.expect(utils.matchesErrorResponseSchema(responseJson)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"The Hero must not be created\", () => {\r",
													"    pm.expect(responseJson.id).to.be.undefined;\r",
													"    pm.expect(responseJson.name).to.be.undefined;\r",
													"    pm.expect(responseJson.skills).to.be.undefined;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-access-token",
												"value": "{{TOKEN_JWT}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{HEROES_ROUTE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Hero - Unexpected skill type (string)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let myHero = utils.getHero();\r",
													"\r",
													"// Redefining skills property\r",
													"delete myHero.skills;\r",
													"const unexpectedSkillsType = \"nothing\"; // string\r",
													"myHero.skills = {\r",
													"    \"power\": unexpectedSkillsType,\r",
													"    \"velocity\": unexpectedSkillsType,\r",
													"    \"combat\": unexpectedSkillsType\r",
													"};\r",
													"\r",
													"// Defining the request body:\r",
													"pm.environment.set(\"requestBody\", JSON.stringify(myHero));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Failed POST Request\", function () {\r",
													"     pm.expect(pm.response.code).to.be.oneOf([400, 500]);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be a json\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response has an error message\", () => {\r",
													"    pm.expect(utils.matchesErrorResponseSchema(responseJson)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"The Hero must not be created\", () => {\r",
													"    pm.expect(responseJson.id).to.be.undefined;\r",
													"    pm.expect(responseJson.name).to.be.undefined;\r",
													"    pm.expect(responseJson.skills).to.be.undefined;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-access-token",
												"value": "{{TOKEN_JWT}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{HEROES_ROUTE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Hero - Unexpected skill type (null)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let myHero = utils.getHero();\r",
													"\r",
													"// Redefining skills property\r",
													"delete myHero.skills;\r",
													"const unexpectedSkillsType = null;\r",
													"myHero.skills = {\r",
													"    \"power\": unexpectedSkillsType,\r",
													"    \"velocity\": unexpectedSkillsType,\r",
													"    \"combat\": unexpectedSkillsType\r",
													"};\r",
													"\r",
													"// Defining the request body:\r",
													"pm.environment.set(\"requestBody\", JSON.stringify(myHero));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Failed POST Request\", function () {\r",
													"     pm.expect(pm.response.code).to.be.oneOf([400, 500]);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be a json\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response has an error message\", () => {\r",
													"    pm.expect(utils.matchesErrorResponseSchema(responseJson)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"The Hero must not be created\", () => {\r",
													"    pm.expect(responseJson.id).to.be.undefined;\r",
													"    pm.expect(responseJson.name).to.be.undefined;\r",
													"    pm.expect(responseJson.skills).to.be.undefined;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-access-token",
												"value": "{{TOKEN_JWT}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{HEROES_ROUTE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Hero - Skills immediately below min (negative)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const MINIMUM_SKILL_VALUE = utils.MINIMUM_SKILL_VALUE();\r",
													"\r",
													"/**\r",
													" * Generates a random hero\r",
													" */\r",
													"let createRandomHero = () => {\r",
													"    return {\r",
													"        \"name\": pm.variables.replaceIn(\"{{$randomFullName}}\"),\r",
													"        \"skills\": {\r",
													"            \"power\": MINIMUM_SKILL_VALUE - 1,\r",
													"            \"velocity\": MINIMUM_SKILL_VALUE - 1,\r",
													"            \"combat\": MINIMUM_SKILL_VALUE - 1,\r",
													"        }\r",
													"    }\r",
													"}\r",
													"\r",
													"let requestBody = createRandomHero();\r",
													"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Failed POST Request\", function () {\r",
													"     pm.expect(pm.response.code).to.be.oneOf([400, 500]);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be valid\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response has an error message\", () => {\r",
													"    pm.expect(utils.matchesErrorResponseSchema(responseJson)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"The Hero must not be created\", () => {\r",
													"    pm.expect(responseJson.id).to.be.undefined;\r",
													"    pm.expect(responseJson.name).to.be.undefined;\r",
													"    pm.expect(responseJson.skills).to.be.undefined;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-access-token",
												"value": "{{TOKEN_JWT}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{HEROES_ROUTE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Hero - Skills below min (negative)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const MINIMUM_SKILL_VALUE = utils.MINIMUM_SKILL_VALUE();\r",
													"\r",
													"/**\r",
													" * Generates a random hero\r",
													" */\r",
													"let createRandomHero = () => {\r",
													"    return {\r",
													"        \"name\": pm.variables.replaceIn(\"{{$randomFullName}}\"),\r",
													"        \"skills\": {\r",
													"            \"power\": utils.getRandomIntValue(-200, MINIMUM_SKILL_VALUE),\r",
													"            \"velocity\": utils.getRandomIntValue(-200, MINIMUM_SKILL_VALUE),\r",
													"            \"combat\": utils.getRandomIntValue(-200, MINIMUM_SKILL_VALUE),\r",
													"        }\r",
													"    }\r",
													"}\r",
													"\r",
													"let requestBody = createRandomHero();\r",
													"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Failed POST Request\", function () {\r",
													"     pm.expect(pm.response.code).to.be.oneOf([400, 500]);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be valid\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response has an error message\", () => {\r",
													"    pm.expect(utils.matchesErrorResponseSchema(responseJson)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"The Hero must not be created\", () => {\r",
													"    pm.expect(responseJson.id).to.be.undefined;\r",
													"    pm.expect(responseJson.name).to.be.undefined;\r",
													"    pm.expect(responseJson.skills).to.be.undefined;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-access-token",
												"value": "{{TOKEN_JWT}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{HEROES_ROUTE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Hero - Skills immediately above max",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const MAXIMUM_SKILL_VALUE = utils.MAXIMUM_SKILL_VALUE();\r",
													"\r",
													"/**\r",
													" * Generates a random hero\r",
													" */\r",
													"let createRandomHero = () => {\r",
													"    return {\r",
													"        \"name\": pm.variables.replaceIn(\"{{$randomFullName}}\"),\r",
													"        \"skills\": {\r",
													"            \"power\": MAXIMUM_SKILL_VALUE + 1,\r",
													"            \"velocity\": MAXIMUM_SKILL_VALUE + 1,\r",
													"            \"combat\": MAXIMUM_SKILL_VALUE + 1,\r",
													"        }\r",
													"    }\r",
													"}\r",
													"\r",
													"let requestBody = createRandomHero();\r",
													"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Failed POST Request\", function () {\r",
													"     pm.expect(pm.response.code).to.be.oneOf([400, 500]);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be valid\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response has an error message\", () => {\r",
													"    pm.expect(utils.matchesErrorResponseSchema(responseJson)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"The Hero must not be created\", () => {\r",
													"    pm.expect(responseJson.id).to.be.undefined;\r",
													"    pm.expect(responseJson.name).to.be.undefined;\r",
													"    pm.expect(responseJson.skills).to.be.undefined;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-access-token",
												"value": "{{TOKEN_JWT}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{HEROES_ROUTE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Hero - Skills above max",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const MAXIMUM_SKILL_VALUE = utils.MAXIMUM_SKILL_VALUE();\r",
													"\r",
													"/**\r",
													" * Generates a random hero\r",
													" */\r",
													"let createRandomHero = () => {\r",
													"    return {\r",
													"        \"name\": pm.variables.replaceIn(\"{{$randomFullName}}\"),\r",
													"        \"skills\": {\r",
													"            \"power\": MAXIMUM_SKILL_VALUE + 2,\r",
													"            \"velocity\": MAXIMUM_SKILL_VALUE + 2,\r",
													"            \"combat\": MAXIMUM_SKILL_VALUE + 2,\r",
													"        }\r",
													"    }\r",
													"}\r",
													"\r",
													"let requestBody = createRandomHero();\r",
													"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Failed POST Request\", function () {\r",
													"     pm.expect(pm.response.code).to.be.oneOf([400, 500]);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be valid\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response has an error message\", () => {\r",
													"    pm.expect(utils.matchesErrorResponseSchema(responseJson)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"The Hero must not be created\", () => {\r",
													"    pm.expect(responseJson.id).to.be.undefined;\r",
													"    pm.expect(responseJson.name).to.be.undefined;\r",
													"    pm.expect(responseJson.skills).to.be.undefined;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-access-token",
												"value": "{{TOKEN_JWT}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{HEROES_ROUTE}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Battle",
							"item": [
								{
									"name": "Battle - Non-existent identifiers",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const nonExistentIdOne = \"aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee\";\r",
													"const nonExistentIdTwo = \"eeeeeeee-ffff-gggg-hhhh-iiiiiiiiiiii\";\r",
													"\r",
													"let requestBody = {\r",
													"    \"hero_id\": nonExistentIdOne,\r",
													"    \"machine_hero_id\": nonExistentIdTwo\r",
													"};\r",
													"\r",
													"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Fail POST Request\", function () {\r",
													"    pm.response.to.have.status(500);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be a json\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response has a message 'Hero not found'\", () => {\r",
													"    pm.expect(utils.matchesErrorResponseSchema(responseJson)).to.be.true;\r",
													"    pm.expect(responseJson.message).to.be.equal(\"Hero not found\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-access-token",
												"value": "{{TOKEN_JWT}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{BATTLE_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{BATTLE_ROUTE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Battle - Unexpected hero_id type (number)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomId = \"c67a8cec-f3b3-4be0-920d-3c559e762ba0\" // Shazam and Spider-man shared id\r",
													"const unexpectedIdType = 12345 // number\r",
													"\r",
													"let requestBody = {\r",
													"    \"hero_id\": unexpectedIdType,\r",
													"    \"machine_hero_id\": randomId\r",
													"};\r",
													"\r",
													"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Fail POST Request\", function () {\r",
													"    pm.response.to.have.status(500);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be a json\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response has a message 'Hero not found'\", () => {\r",
													"    pm.expect(utils.matchesErrorResponseSchema(responseJson)).to.be.true;\r",
													"    pm.expect(responseJson.message).to.be.equal(\"Hero not found\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-access-token",
												"value": "{{TOKEN_JWT}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{BATTLE_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{BATTLE_ROUTE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Battle - Unexpected hero_id type (boolean)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomId = \"c67a8cec-f3b3-4be0-920d-3c559e762ba0\" // Shazam and Spider-man shared id\r",
													"const unexpectedIdType = true // boolean\r",
													"\r",
													"let requestBody = {\r",
													"    \"hero_id\": unexpectedIdType,\r",
													"    \"machine_hero_id\": randomId\r",
													"};\r",
													"\r",
													"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Fail POST Request\", function () {\r",
													"    pm.response.to.have.status(500);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be a json\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response has a message 'Hero not found'\", () => {\r",
													"    pm.expect(utils.matchesErrorResponseSchema(responseJson)).to.be.true;\r",
													"    pm.expect(responseJson.message).to.be.equal(\"Hero not found\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-access-token",
												"value": "{{TOKEN_JWT}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{BATTLE_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{BATTLE_ROUTE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Battle - Unexpected hero_id type (array)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomId = \"c67a8cec-f3b3-4be0-920d-3c559e762ba0\" // Shazam and Spider-man shared id\r",
													"const unexpectedIdType = [] // array\r",
													"\r",
													"let requestBody = {\r",
													"    \"hero_id\": unexpectedIdType,\r",
													"    \"machine_hero_id\": randomId\r",
													"};\r",
													"\r",
													"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Fail POST Request\", function () {\r",
													"    pm.response.to.have.status(500);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be a json\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response has a message 'Hero not found'\", () => {\r",
													"    pm.expect(utils.matchesErrorResponseSchema(responseJson)).to.be.true;\r",
													"    pm.expect(responseJson.message).to.be.equal(\"Hero not found\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-access-token",
												"value": "{{TOKEN_JWT}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{BATTLE_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{BATTLE_ROUTE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Battle - Unexpected machine_hero_id type (number)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomId = \"c67a8cec-f3b3-4be0-920d-3c559e762ba0\" // Shazam and Spider-man shared id\r",
													"const unexpectedIdType = 12345 // number\r",
													"\r",
													"let requestBody = {\r",
													"    \"hero_id\": randomId,\r",
													"    \"machine_hero_id\": unexpectedIdType\r",
													"};\r",
													"\r",
													"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Fail POST Request\", function () {\r",
													"    pm.response.to.have.status(500);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be a json\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response has a message 'Machine hero not found'\", () => {\r",
													"    pm.expect(utils.matchesErrorResponseSchema(responseJson)).to.be.true;\r",
													"    pm.expect(responseJson.message).to.be.equal(\"Machine hero not found\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-access-token",
												"value": "{{TOKEN_JWT}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{BATTLE_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{BATTLE_ROUTE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Battle - Unexpected machine_hero_id type (boolean)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomId = \"c67a8cec-f3b3-4be0-920d-3c559e762ba0\" // Shazam and Spider-man shared id\r",
													"const unexpectedIdType = true // boolean\r",
													"\r",
													"let requestBody = {\r",
													"    \"hero_id\": randomId,\r",
													"    \"machine_hero_id\": unexpectedIdType\r",
													"};\r",
													"\r",
													"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Fail POST Request\", function () {\r",
													"    pm.response.to.have.status(500);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be a json\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response has a message 'Machine hero not found'\", () => {\r",
													"    pm.expect(utils.matchesErrorResponseSchema(responseJson)).to.be.true;\r",
													"    pm.expect(responseJson.message).to.be.equal(\"Machine hero not found\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-access-token",
												"value": "{{TOKEN_JWT}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{BATTLE_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{BATTLE_ROUTE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Battle - Unexpected machine_hero_id type (array)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomId = \"c67a8cec-f3b3-4be0-920d-3c559e762ba0\" // Shazam and Spider-man shared id\r",
													"const unexpectedIdType = [] // array\r",
													"\r",
													"let requestBody = {\r",
													"    \"hero_id\": randomId,\r",
													"    \"machine_hero_id\": unexpectedIdType\r",
													"};\r",
													"\r",
													"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Fail POST Request\", function () {\r",
													"    pm.response.to.have.status(500);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be a json\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response has a message 'Machine hero not found'\", () => {\r",
													"    pm.expect(utils.matchesErrorResponseSchema(responseJson)).to.be.true;\r",
													"    pm.expect(responseJson.message).to.be.equal(\"Machine hero not found\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-access-token",
												"value": "{{TOKEN_JWT}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{BATTLE_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{BATTLE_ROUTE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Battle - One hero has null skills",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const HEROES_URL = `${pm.environment.get(\"HEROES_CHALLENGE_URL\")}/${pm.collectionVariables.get(\"HEROES_ROUTE\")}`;\r",
													"const TOKEN_JWT = pm.environment.get(\"TOKEN_JWT\");\r",
													"let heroOne, heroTwo;\r",
													"\r",
													"let heroWithNullSkills = {\r",
													"    \"name\": pm.variables.replaceIn(\"{{$randomFullName}}\"),\r",
													"    \"skills\": {\r",
													"        \"power\": \"null\",\r",
													"        \"velocity\": \"null\",\r",
													"        \"combat\": \"null\",\r",
													"    }\r",
													"}\r",
													"\r",
													"// Creating a hero with null skill values:\r",
													"const createHeroRequest = utils.createHeroRequest(HEROES_URL, TOKEN_JWT, heroWithNullSkills);\r",
													"pm.sendRequest(createHeroRequest, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(\"Error while creating a hero!\");\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        console.log(`Hero Without Skills Created: ${JSON.stringify(response.json())}`);\r",
													"    }\r",
													"\r",
													"    // Getting heroes:\r",
													"    const getRequest = utils.getHeroesRequest(HEROES_URL, TOKEN_JWT);\r",
													"    pm.sendRequest(getRequest, (error, response) => {\r",
													"        if (error) {\r",
													"            console.log(error);\r",
													"        } else {\r",
													"            const heroes = response.json();\r",
													"\r",
													"            // Finding a hero with at least one null skill\r",
													"            heroOne = heroes.find(hero => hero.skills.power == null || hero.skills.velocity == null || hero.skills.combat == null);\r",
													"\r",
													"            // Finding any oponnent:\r",
													"            heroTwo = heroes[Math.floor(Math.random() * heroes.length)];\r",
													"\r",
													"            console.log(`Hero One: ${JSON.stringify(heroOne)}`)\r",
													"            console.log(`Hero Two: ${JSON.stringify(heroTwo)}`)\r",
													"        }\r",
													"\r",
													"        let requestBody = utils.createBattleRequestBody(heroOne.id, heroTwo.id)\r",
													"        pm.environment.set(\"requestBody\", requestBody);\r",
													"    });\r",
													"\r",
													"})\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Successful POST Request\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be a json\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response has an error message\", () => {\r",
													"    pm.expect(utils.matchesErrorResponseSchema(responseJson)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-access-token",
												"value": "{{TOKEN_JWT}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{BATTLE_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{BATTLE_ROUTE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Battle - One hero has skills below min",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const HEROES_URL = `${pm.environment.get(\"HEROES_CHALLENGE_URL\")}/${pm.collectionVariables.get(\"HEROES_ROUTE\")}`;\r",
													"const TOKEN_JWT = pm.environment.get(\"TOKEN_JWT\");\r",
													"const MINIMUN_SKILL_VALUE = 0;\r",
													"\r",
													"let heroOne, heroTwo;\r",
													"\r",
													"let heroNegativeSkills = {\r",
													"    \"name\": pm.variables.replaceIn(\"Strong {{$randomFullName}}\"),\r",
													"    \"skills\": {\r",
													"        \"power\": -100,\r",
													"        \"velocity\": -100,\r",
													"        \"combat\": -100,\r",
													"    }\r",
													"}\r",
													"const createHeroRequest = {\r",
													"    url: HEROES_URL,\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-access-token': TOKEN_JWT\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify(heroNegativeSkills)\r",
													"    }\r",
													"};\r",
													"\r",
													"// Creating a hero with null skill values\r",
													"pm.sendRequest(createHeroRequest, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(\"Error while creating a hero!\");\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        console.log(`Hero Without negative skills created: ${JSON.stringify(response.json())}`);\r",
													"    }\r",
													"\r",
													"    const getRequest = {\r",
													"        url: HEROES_URL,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'x-access-token': TOKEN_JWT\r",
													"        },\r",
													"    }\r",
													"\r",
													"    pm.sendRequest(getRequest, (error, response) => {\r",
													"        if (error) {\r",
													"            console.log(error);\r",
													"        } else {\r",
													"            const heroes = response.json();\r",
													"            heroOne = heroes.find(hero => hero.skills.power < MINIMUN_SKILL_VALUE || hero.skills.velocity < MINIMUN_SKILL_VALUE || hero.skills.combat < MINIMUN_SKILL_VALUE);\r",
													"            heroTwo = heroes[Math.floor(Math.random() * heroes.length)];\r",
													"            console.log(`Hero One: ${JSON.stringify(heroOne)}`)\r",
													"            console.log(`Hero Two: ${JSON.stringify(heroTwo)}`)\r",
													"        }\r",
													"\r",
													"        let requestBody = {\r",
													"            \"hero_id\": heroOne.id,\r",
													"            \"machine_hero_id\": heroTwo.id\r",
													"        };\r",
													"        pm.environment.set(\"requestBody\", JSON.stringify(requestBody));\r",
													"    });\r",
													"\r",
													"})\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Successful POST Request\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be a json\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response has an error message\", () => {\r",
													"    pm.expect(utils.matchesErrorResponseSchema(responseJson)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-access-token",
												"value": "{{TOKEN_JWT}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{BATTLE_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{BATTLE_ROUTE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Battle - Opponents have skills below min",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const HEROES_URL = `${pm.environment.get(\"HEROES_CHALLENGE_URL\")}/${pm.collectionVariables.get(\"HEROES_ROUTE\")}`;\r",
													"const TOKEN_JWT = pm.environment.get(\"TOKEN_JWT\");\r",
													"const MINIMUN_SKILL_VALUE = utils.MINIMUM_SKILL_VALUE();\r",
													"let heroOne, heroTwo;\r",
													"\r",
													"/**\r",
													" * Get a hero object with negative skills\r",
													" */\r",
													"let getHeroWithNegativeSkills = () => {\r",
													"    return {\r",
													"        \"name\": pm.variables.replaceIn(\"{{$randomFullName}}\"),\r",
													"        \"skills\": {\r",
													"            \"power\": utils.getRandomIntValue(-200, -1),\r",
													"            \"velocity\": utils.getRandomIntValue(-200, -1),\r",
													"            \"combat\": utils.getRandomIntValue(-200, -1),\r",
													"        }\r",
													"    }\r",
													"};\r",
													"\r",
													"\r",
													"// Creating a hero with negative skill values\r",
													"let createHeroRequest = utils.createHeroRequest(HEROES_URL, TOKEN_JWT, getHeroWithNegativeSkills());\r",
													"pm.sendRequest(createHeroRequest, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(\"Error while creating a hero!\");\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        console.log(`Hero with negative skills created: ${JSON.stringify(response.json())}`);\r",
													"    }\r",
													"\r",
													"    // Creating another hero with negative skill values:\r",
													"    createHeroRequest = utils.createHeroRequest(HEROES_URL, TOKEN_JWT, getHeroWithNegativeSkills());\r",
													"    pm.sendRequest(createHeroRequest, (error, response) => {\r",
													"        if (error) {\r",
													"            console.log(\"Error while creating a hero!\");\r",
													"            console.log(error);\r",
													"        } else {\r",
													"            console.log(`Other hero with negative skills created: ${JSON.stringify(response.json())}`);\r",
													"        }\r",
													"\r",
													"        // Getting Heroes:\r",
													"        let getHeroesRequest = utils.getHeroesRequest(HEROES_URL, TOKEN_JWT);\r",
													"        pm.sendRequest(getHeroesRequest, (error, response) => {\r",
													"            if (error) {\r",
													"                console.log(error);\r",
													"            } else {\r",
													"                const heroes = response.json();\r",
													"\r",
													"                // Filtering heroes with negative skills:\r",
													"                let heroesWithNegativeSkills = heroes.filter(hero => hero.skills.power < MINIMUN_SKILL_VALUE || hero.skills.velocity < MINIMUN_SKILL_VALUE || hero.skills.combat < MINIMUN_SKILL_VALUE);\r",
													"\r",
													"                // Getting two heroes for battle:\r",
													"                heroOne = heroesWithNegativeSkills.pop();\r",
													"                heroTwo = heroesWithNegativeSkills.pop();\r",
													"\r",
													"                console.log(`Hero One: ${JSON.stringify(heroOne)}`)\r",
													"                console.log(`Hero Two: ${JSON.stringify(heroTwo)}`)\r",
													"            }\r",
													"\r",
													"            let requestBody = utils.createBattleRequestBody(heroOne.id, heroTwo.id);\r",
													"            pm.environment.set(\"requestBody\", requestBody);\r",
													"        });\r",
													"    });\r",
													"})\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Successful POST Request\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be a json\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response has a message or indicates a winner/loser\", () => {\r",
													"    pm.expect(utils.matchesBattleResponseSchema(responseJson)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-access-token",
												"value": "{{TOKEN_JWT}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{BATTLE_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{BATTLE_ROUTE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Battle - Opponents have the same id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const sharedId = \"c67a8cec-f3b3-4be0-920d-3c559e762ba0\" // Shazam and Spider-man shared id\r",
													"\r",
													"let requestBody = {\r",
													"    \"hero_id\": sharedId,\r",
													"    \"machine_hero_id\": sharedId\r",
													"};\r",
													"\r",
													"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Fail Request\", function () {\r",
													"    pm.response.to.have.status(500);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be a json\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response has a message 'Change the hero'\", () => {\r",
													"    pm.expect(utils.matchesErrorResponseSchema(responseJson)).to.be.true;\r",
													"    pm.expect(responseJson.message).to.be.equal(\"Change the hero\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-access-token",
												"value": "{{TOKEN_JWT}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{BATTLE_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{BATTLE_ROUTE}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Duplicates",
					"item": [
						{
							"name": "Create Heroes",
							"item": [
								{
									"name": "Duplicate Hero",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const HEROES_URL = `${pm.environment.get(\"HEROES_CHALLENGE_URL\")}/${pm.collectionVariables.get(\"HEROES_ROUTE\")}`;\r",
													"const TOKEN_JWT = pm.environment.get(\"TOKEN_JWT\");\r",
													"\r",
													"/**\r",
													" * Creating a new random hero\r",
													" */\r",
													"let myHero = utils.getHero();\r",
													"const createHeroRequest = utils.createHeroRequest(HEROES_URL, TOKEN_JWT, myHero);\r",
													"\r",
													"pm.sendRequest(createHeroRequest, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(\"Error while creating a hero!\");\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        console.log(`Created Hero: ${JSON.stringify(response.json())}`);\r",
													"\r",
													"        // Defining the request body as the same already created hero:\r",
													"        let requestBody = myHero;\r",
													"        pm.environment.set(\"requestBody\", JSON.stringify(requestBody));\r",
													"    }\r",
													"})\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Failed POST Request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400, 500]);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be valid\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response is a message saying 'This hero already exists'\", () => {\r",
													"    pm.expect(utils.matchesErrorResponseSchema(responseJson)).to.be.true;\r",
													"    pm.expect(responseJson.message).to.equal('This hero already exists');\r",
													"});\r",
													"\r",
													"pm.test(\"Hero must not be created again\", () => {\r",
													"    pm.expect(responseJson.id).to.be.undefined;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-access-token",
												"value": "{{TOKEN_JWT}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{HEROES_ROUTE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Heroes with the same name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const HEROES_URL = `${pm.environment.get(\"HEROES_CHALLENGE_URL\")}/${pm.collectionVariables.get(\"HEROES_ROUTE\")}`;\r",
													"const TOKEN_JWT = pm.environment.get(\"TOKEN_JWT\");\r",
													"\r",
													"/**\r",
													" * Creating a new random hero with name\r",
													" */\r",
													"let createHeroWithName = (name) => {\r",
													"    return {\r",
													"        \"name\": name,\r",
													"        \"skills\": {\r",
													"            \"power\": getRandomSkillValue(),\r",
													"            \"velocity\": getRandomSkillValue(),\r",
													"            \"combat\": getRandomSkillValue(),\r",
													"        }\r",
													"    }\r",
													"}\r",
													"\r",
													"// Creating both heroes with the same name:\r",
													"let myHero = utils.getHero();\r",
													"let otherHero = utils.getHero();\r",
													"delete otherHero.name;\r",
													"otherHero.name = myHero.name;\r",
													"\r",
													"// Creating a hero\r",
													"const createHeroRequest = utils.createHeroRequest(HEROES_URL, TOKEN_JWT, myHero);\r",
													"pm.sendRequest(createHeroRequest, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(\"Error while creating a hero!\");\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        console.log(`Created Hero: ${JSON.stringify(response.json())}`);\r",
													"\r",
													"        // Creating the request body with other hero with the same name\r",
													"        let requestBody = otherHero;\r",
													"        pm.environment.set(\"requestBody\", JSON.stringify(requestBody));\r",
													"    }\r",
													"})\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Failed POST Request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400, 500]);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be valid\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response is a message saying 'This hero already exists'\", () => {\r",
													"    pm.expect(utils.matchesErrorResponseSchema(responseJson)).to.be.true;\r",
													"    pm.expect(responseJson.message).to.equal('This hero already exists');\r",
													"});\r",
													"\r",
													"pm.test(\"Hero must not be created again\", () => {\r",
													"    pm.expect(responseJson.id).to.be.undefined;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-access-token",
												"value": "{{TOKEN_JWT}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{HEROES_ROUTE}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Unexpected Body Fields",
					"item": [
						{
							"name": "Create Heroes",
							"item": [
								{
									"name": "Try to create a hero with specific id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Generating a random ID:\r",
													"const randomId = pm.variables.replaceIn('{{$guid}}');\r",
													"pm.environment.set(\"randomId\", randomId);\r",
													"console.log(`randomId: ${randomId}`);\r",
													"\r",
													"// Inserting the id in a new random hero:\r",
													"let myHero = utils.getHero();\r",
													"myHero.id = randomId;\r",
													"\r",
													"// Creating the request body:\r",
													"pm.environment.set(\"requestBody\", JSON.stringify(myHero));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Successful POST Request\", function () {\r",
													"    // the ideal response should be 201!\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
													"});\r",
													"\r",
													"pm.test(\"The response must be valid\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response is a hero\", () => {\r",
													"    pm.expect(utils.matchesHeroSchema(responseJson)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"The Hero was created with an id\", () => {\r",
													"    pm.expect(responseJson.id.length).to.be.greaterThan(0);\r",
													"});\r",
													"\r",
													"pm.test(\"The hero id must be different than the one sent in the post request to create it\", () => {\r",
													"    let randomId = pm.environment.get(\"randomId\");\r",
													"    pm.expect(randomId.length).to.be.greaterThan(0);\r",
													"    pm.expect(responseJson.id).not.to.be.equal(randomId);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time must not take too long\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-access-token",
												"value": "{{TOKEN_JWT}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}",
											"host": [
												"{{HEROES_CHALLENGE_URL}}"
											],
											"path": [
												"{{HEROES_ROUTE}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Bad Routes",
					"item": [
						{
							"name": "Get Heroes Child Route",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Failed Request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([403, 404, 405]);\r",
											"});\r",
											"\r",
											"pm.test(\"The response be an error\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/html; charset=utf-8');\r",
											"    pm.response.to.be.withBody;\r",
											"\r",
											"    // Load the HTML response to $\r",
											"    const $ = cheerio.load(pm.response.text());\r",
											"    // Using the jQuery selector API to get the element pre:\r",
											"    pm.expect($(\"title\").text()).to.be.equal(\"Error\");\r",
											"    pm.expect($(\"pre\").text()).to.contain(\"Cannot GET\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{TOKEN_JWT}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}/all/",
									"host": [
										"{{HEROES_CHALLENGE_URL}}"
									],
									"path": [
										"{{HEROES_ROUTE}}",
										"all",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Hero with id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"The response must not be a single hero\", function () {\r",
											"    pm.expect(utils.matchesHeroSchema(responseJson)).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{TOKEN_JWT}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}/?id={{randomId}}",
									"host": [
										"{{HEROES_CHALLENGE_URL}}"
									],
									"path": [
										"{{HEROES_ROUTE}}",
										""
									],
									"query": [
										{
											"key": "id",
											"value": "{{randomId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cannot Delete a Hero",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/**\r",
											" * Expecting 403 - Forbidden, 404 - Not Found or 405 - Method Not Allowed\r",
											" */\r",
											"pm.test(\"Failed Request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([403, 404, 405]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{TOKEN_JWT}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}/?id=95df8a19-ef1a-4162-a1a6-ea4f301bc877",
									"host": [
										"{{HEROES_CHALLENGE_URL}}"
									],
									"path": [
										"{{HEROES_ROUTE}}",
										""
									],
									"query": [
										{
											"key": "id",
											"value": "95df8a19-ef1a-4162-a1a6-ea4f301bc877"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cannot Update a Hero",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/**\r",
											" * Expecting 403 - Forbidden, 404 - Not Found or 405 - Method Not Allowed\r",
											" */\r",
											"pm.test(\"Failed Request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([403, 404, 405]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{TOKEN_JWT}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    {\r\n        \"id\": \"95df8a19-ef1a-4162-a1a6-ea4f301bc877\",\r\n        \"name\": \"Blanche Gutmann\",\r\n        \"skills\": {\r\n            \"power\": 1,\r\n            \"velocity\": 1,\r\n            \"combat\": 1\r\n        }\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}/?id=95df8a19-ef1a-4162-a1a6-ea4f301bc877",
									"host": [
										"{{HEROES_CHALLENGE_URL}}"
									],
									"path": [
										"{{HEROES_ROUTE}}",
										""
									],
									"query": [
										{
											"key": "id",
											"value": "95df8a19-ef1a-4162-a1a6-ea4f301bc877"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "Grouped test cases for invalid and unexpected inputs.\n\nBasically, the \"unhappy paths\" are validated here to ensure that the system validates against invalid inputs by throwing errors or otherwise not allowing the system to perform in a certain away."
		},
		{
			"name": "Destructive",
			"item": [
				{
					"name": "Authenticating multiple times in a row",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Count Logic:\r",
									"const counter = pm.environment.get(\"Counter\");\r",
									"let requestNumber = pm.environment.get(\"RequestNumber\") || 1;\r",
									"console.log(`counter: ${counter}`);\r",
									"console.log(`requestNumber: ${requestNumber}`);\r",
									"if (requestNumber < counter) {\r",
									"    postman.setNextRequest(\"Authenticating multiple times in a row\");\r",
									"    requestNumber++;\r",
									"    pm.environment.set(\"RequestNumber\", requestNumber);\r",
									"}\r",
									"else {\r",
									"    pm.environment.set(\"RequestNumber\", 1);\r",
									"}\r",
									"\r",
									"// Tests:\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Successful Authentication\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response must be valid\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response has all properties\", () => {\r",
									"    pm.expect(responseJson.auth).to.be.a('boolean');\r",
									"    pm.expect(responseJson.token).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Token must be provided\", () => {\r",
									"    pm.expect(responseJson.auth).to.eql(true);\r",
									"    pm.expect(responseJson.token.length).to.be.greaterThan(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time must not take too long\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{HEROES_CHALLENGE_APP_ID}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "x-app-id",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{HEROES_CHALLENGE_URL}}/{{AUTH_ROUTE}}",
							"host": [
								"{{HEROES_CHALLENGE_URL}}"
							],
							"path": [
								"{{AUTH_ROUTE}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Getting heroes multiple times in a row",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Count Logic:\r",
									"const counter = pm.environment.get(\"Counter\");\r",
									"let requestNumber = pm.environment.get(\"RequestNumber\") || 1;\r",
									"console.log(`counter: ${counter}`);\r",
									"console.log(`requestNumber: ${requestNumber}`);\r",
									"if (requestNumber < counter) {\r",
									"    postman.setNextRequest(\"Getting heroes times in a row\");\r",
									"    requestNumber++;\r",
									"    pm.environment.set(\"RequestNumber\", requestNumber);\r",
									"}\r",
									"else {\r",
									"    pm.environment.set(\"RequestNumber\", 1);\r",
									"}\r",
									"\r",
									"// Tests:\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Successful GET Request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response must be valid\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is an array of heroes\", () => {\r",
									"    pm.expect(utils.matchesHeroArraySchema(responseJson)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time must not take too long\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{TOKEN_JWT}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}",
							"host": [
								"{{HEROES_CHALLENGE_URL}}"
							],
							"path": [
								"{{HEROES_ROUTE}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Heroes - SQL Injection Try",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Fail GET Request\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"The response be an error\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/html; charset=utf-8');\r",
									"    pm.response.to.be.withBody;\r",
									"\r",
									"    // Load the HTML response to $\r",
									"    const $ = cheerio.load(pm.response.text());\r",
									"    // Using the jQuery selector API to get the element pre:\r",
									"    pm.expect($(\"title\").text()).to.be.equal(\"Error\");\r",
									"    pm.expect($(\"pre\").text()).to.contain(\"Cannot GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time must not take too long\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{TOKEN_JWT}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}/TRUNCATE TABLE heroes",
							"host": [
								"{{HEROES_CHALLENGE_URL}}"
							],
							"path": [
								"{{HEROES_ROUTE}}",
								"TRUNCATE TABLE heroes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create hero - SQL Injection try",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Creating the request body:\r",
									"let requestBody = \"DELETE FROM hero\";\r",
									"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Fail POST Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"The response be an error\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/html; charset=utf-8');\r",
									"    pm.response.to.be.withBody;\r",
									"\r",
									"    // Load the HTML response to $\r",
									"    const $ = cheerio.load(pm.response.text());\r",
									"    // Using the jQuery selector API to get the element pre:\r",
									"    pm.expect($(\"title\").text()).to.be.equal(\"Error\");\r",
									"    pm.expect($(\"pre\").text()).to.be.equal(\"Bad Request\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time must not take too long\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{TOKEN_JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}",
							"host": [
								"{{HEROES_CHALLENGE_URL}}"
							],
							"path": [
								"{{HEROES_ROUTE}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create hero - SQL Injection - another try",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Creating the request body:\r",
									"let requestBody = \"UPDATE hero SET '' WHERE id = \\\"8f6c3394-d1fd-4909-8f22-40505ca33c19\\\"\";\r",
									"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Fail POST Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"The response be an error\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/html; charset=utf-8');\r",
									"    pm.response.to.be.withBody;\r",
									"\r",
									"    // Load the HTML response to $\r",
									"    const $ = cheerio.load(pm.response.text());\r",
									"    // Using the jQuery selector API to get the element pre:\r",
									"    pm.expect($(\"title\").text()).to.be.equal(\"Error\");\r",
									"    pm.expect($(\"pre\").text()).to.be.equal(\"Bad Request\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time must not take too long\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{TOKEN_JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HEROES_CHALLENGE_URL}}/{{HEROES_ROUTE}}",
							"host": [
								"{{HEROES_CHALLENGE_URL}}"
							],
							"path": [
								"{{HEROES_ROUTE}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Grouped test cases for unpredictable scenarios to determine whether or not the application can handle these situations gracefully."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"utils = {",
					"    MINIMUM_SKILL_VALUE: function () {",
					"        return pm.collectionVariables.get(\"MINIMUM_SKILL_VALUE\");",
					"    },",
					"",
					"    MAXIMUM_SKILL_VALUE: function () {",
					"        return pm.collectionVariables.get(\"MAXIMUM_SKILL_VALUE\");",
					"    },",
					"",
					"    /**",
					"     * Generates a random int value between two numbers, in an inclusive way",
					"     */",
					"    getRandomIntValue: function (min, max) {",
					"        min = Math.ceil(min);",
					"        max = Math.floor(max);",
					"        return Math.floor(Math.random() * (max - min + 1) + min);",
					"    },",
					"",
					"    /**",
					"     * Generates a random skill value ",
					"     */",
					"    getRandomSkillValue: function () {",
					"        return this.getRandomIntValue(this.MINIMUM_SKILL_VALUE(), this.MAXIMUM_SKILL_VALUE());",
					"    },",
					"",
					"    /**",
					"     * Generates a valid hero based on what's passed as an argument",
					"     */",
					"    getHero: function ({ name, skills: { power, velocity, combat } } = { skills: {} }) {",
					"        return {",
					"            \"name\": name || pm.variables.replaceIn(\"{{$randomFullName}}\"),",
					"            \"skills\": {",
					"                \"power\": power || this.getRandomSkillValue(),",
					"                \"velocity\": velocity || this.getRandomSkillValue(),",
					"                \"combat\": combat || this.getRandomSkillValue(),",
					"            }",
					"        }",
					"    },",
					"",
					"    /**",
					"     * Generates a `create hero` request based on a url, token and a raw body content",
					"     * (The URL and token may change according the environment)",
					"     */",
					"    createHeroRequest: function (createHeroUrl, token, bodyContent = this.getHero()) {",
					"        return {",
					"            url: createHeroUrl,",
					"            method: 'POST',",
					"            header: {",
					"                'Content-Type': 'application/json',",
					"                'x-access-token': token",
					"            },",
					"            body: {",
					"                mode: 'raw',",
					"                raw: JSON.stringify(bodyContent)",
					"            }",
					"        }",
					"    },",
					"",
					"    /**",
					"     * Creates a 'get hero' request based on a url and token",
					"     * (The URL and token may change according the environment)",
					"     * ",
					"     */",
					"    getHeroesRequest: function (getHeroesUrl, token) {",
					"        return {",
					"            url: getHeroesUrl,",
					"            method: 'GET',",
					"            header: {",
					"                'Content-Type': 'application/json',",
					"                'x-access-token': token",
					"            },",
					"        }",
					"    },",
					"",
					"    /**",
					"     * Create a battle request body based on a hero_id and a machine_hero_id",
					"     */",
					"    createBattleRequestBody: function (hero_id, machine_hero_id) {",
					"        return JSON.stringify({",
					"            \"hero_id\": hero_id,",
					"            \"machine_hero_id\": machine_hero_id",
					"        });",
					"    },",
					"",
					"    /**",
					"     * Get the hero array schema",
					"     */",
					"    getHeroArraySchema: function () {",
					"        return {",
					"            \"type\": \"array\",",
					"            \"items\": [{",
					"                \"type\": \"object\",",
					"                \"properties\": {",
					"                    \"id\": { \"type\": \"string\" },",
					"                    \"name\": { \"type\": \"string\" },",
					"                    \"skills\": {",
					"                        \"type\": \"object\",",
					"                        \"properties\": {",
					"                            \"power\": { \"type\": \"integer\" },",
					"                            \"velocity\": { \"type\": \"integer\" },",
					"                            \"combat\": { \"type\": \"integer\" }",
					"                        },",
					"                        \"required\": [\"power\", \"velocity\", \"combat\"]",
					"                    },",
					"                },",
					"                \"required\": [\"id\", \"name\", \"skills\"]",
					"            }]",
					"        }",
					"    },",
					"",
					"    /**",
					"     * Get the hero schema",
					"     */",
					"    getHeroSchema: function () {",
					"        return {",
					"            \"type\": \"object\",",
					"            \"properties\": {",
					"                \"id\": { \"type\": \"string\" },",
					"                \"name\": { \"type\": \"string\" },",
					"                \"skills\": {",
					"                    \"type\": \"object\",",
					"                    \"properties\": {",
					"                        \"power\": { \"type\": \"integer\" },",
					"                        \"velocity\": { \"type\": \"integer\" },",
					"                        \"combat\": { \"type\": \"integer\" }",
					"                    },",
					"                    \"required\": [\"power\", \"velocity\", \"combat\"]",
					"                },",
					"            },",
					"            \"required\": [\"id\", \"name\", \"skills\"]",
					"        }",
					"    },",
					"",
					"    /**",
					"     * Get failed requests error message schema",
					"     */",
					"    getErrorResponseSchema: function () {",
					"        return {",
					"            \"type\": \"object\",",
					"            \"properties\": {",
					"                \"message\": { \"type\": \"string\" },",
					"            },",
					"            \"required\": [\"message\"]",
					"        }",
					"    },",
					"",
					"    /**",
					"     * Get failed requests error message schema",
					"     */",
					"    getBattleResponseSchema: function () {",
					"        return {",
					"            \"type\": \"object\",",
					"            \"properties\": {",
					"                \"winner\": { \"type\": \"string\" },",
					"                \"loser\": { \"type\": \"string\" }",
					"            },",
					"            \"required\": [\"winner\", \"loser\"]",
					"        }",
					"    },",
					"",
					"    /**",
					"     * Get tie battle results schema",
					"     */",
					"    getTieResultSchema: function () {",
					"        return {",
					"            \"type\": \"object\",",
					"            \"properties\": {",
					"                \"message\": { \"type\": \"string\" },",
					"            },",
					"            \"required\": [\"message\"]",
					"",
					"        }",
					"    },",
					"",
					"    /**",
					"     * Check if a content matches the hero schema",
					"     */",
					"    matchesHeroArraySchema: function (content) {",
					"        return tv4.validate(content, this.getHeroArraySchema());",
					"    },",
					"",
					"    /**",
					"     * Check if a content matches the hero schema",
					"     */",
					"    matchesHeroSchema: function (content) {",
					"        return tv4.validate(content, this.getHeroSchema());",
					"    },",
					"",
					"    /**",
					"     * Check if a content matches failed requests error message schema",
					"     */",
					"    matchesErrorResponseSchema: function (content) {",
					"        return tv4.validate(content, this.getErrorResponseSchema());",
					"    },",
					"",
					"    /**",
					"     * Check if a content matches battle responses schema",
					"     */",
					"    matchesBattleResponseSchema: function (content) {",
					"        return tv4.validate(content, this.getBattleResponseSchema());",
					"    },",
					"",
					"    /**",
					"     * Check if a content matches battle responses schema",
					"     */",
					"    matchesTieSchema: function (content) {",
					"        return tv4.validate(content, this.getTieResultSchema());",
					"    }",
					"};"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "AUTH_ROUTE",
			"value": "auth",
			"type": "string"
		},
		{
			"key": "HEROES_ROUTE",
			"value": "heroes",
			"type": "string"
		},
		{
			"key": "BATTLE_ROUTE",
			"value": "heroes/battle",
			"type": "string"
		},
		{
			"key": "MAXIMUM_SKILL_VALUE",
			"value": "200",
			"type": "string"
		},
		{
			"key": "MINIMUM_SKILL_VALUE",
			"value": "0",
			"type": "string"
		},
		{
			"key": "HERO_TEMPLATE",
			"value": "{\n\t\"id\": \"[ID]\",\n\t\"name\": \"[NAME]\",\n\t\"skills\": {\n\t\t\"power\": 0,\n\t\t\"velocity\": 0,\n\t\t\"combat\": 0\n\t}\n}",
			"type": "string"
		},
		{
			"key": "BATTLE_TEMPLATE",
			"value": "{\n\t\"hero_id\": \"[HERO_ID]\",\n\t\"machine_hero_id\": \"[MACHINE_HERO_ID]\"\n}",
			"type": "string"
		}
	]
}